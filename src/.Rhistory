saveRDS(lkup, "../results/lkup.rds")
################################################################################
##### Load and clean the ref dataset.
orig_ref <- read.fasta("../../data/uniprot-all.fasta", seqtype = "AA", as.string = T)
ref <- data.frame(Accid = getName(orig_ref), Rseq = rapply(getSequence(orig_ref, as.string = T), c)) %>%
### Clean Accid.
mutate(Accid = substr(as.character(Accid), 4, 9)) %>%
### Clean Rseq.
mutate(Rseq = toupper(Rseq)) %>%
### Remove duplicates.
distinct(Accid, Rseq)
### Save the clean version.
write.csv(ref,"../results/ref.csv")
saveRDS(ref, "../results/ref.rds")
##### Merge the lkup and ref datasets by Accid. Do checks.
lkup <- read.csv("../results/lkup.csv")
ref <- read.csv("../results/ref.csv")
combo <- merge(lkup, ref, by = "Accid") %>%
### Keep obs with unique values in Lseq and Rseq only.
group_by(Rseq) %>%
filter(!duplicated(Lseq))
### Check if all Accids from lkup are in combo. Must be TRUE.
assert_that(length(intersect(combo$Accid, lkup$Accid)) == length(unique(lkup$Accid)))
### Check if all Accids from ref are in combo. Must be FALSE.
assert_that(length(intersect(combo$Accid, as.character(ref$Accid))) != length(unique(ref$Accid)))
### Set Match to 1 if Lseq is a substring of Rseq; 0 otherwise.
combo %>%
mutate(Match = grepl(Lseq,Rseq)) %>%
filter(Match == TRUE) %>%
mutate(Llen = nchar(Lseq),
Rlen = nchar(Rseq),
Lstart = regexpr(Lseq,Rseq,fixed = TRUE),
Lend = Lstart + Llen -1)
lkup <- read.csv("../results/lkup.csv")
ref <- read.csv("../results/ref.csv")
combo <- merge(lkup, ref, by = "Accid") %>%
### Keep obs with unique values in Lseq and Rseq only.
group_by(Rseq) %>%
filter(!duplicated(Lseq))
### Check if all Accids from lkup are in combo. Must be TRUE.
assert_that(length(intersect(combo$Accid, lkup$Accid)) == length(unique(lkup$Accid)))
### Check if all Accids from ref are in combo. Must be FALSE.
assert_that(length(intersect(combo$Accid, as.character(ref$Accid))) != length(unique(ref$Accid)))
### Set Match to 1 if Lseq is a substring of Rseq; 0 otherwise.
combo %>%
mutate(Match = grepl(Lseq,Rseq)) %>%
filter(Match == TRUE) %>%
mutate(Llen = nchar(as.character(Lseq)),
Rlen = nchar(as.character(Rseq)),
Lstart = regexpr(Lseq,Rseq,fixed = TRUE),
Lend = Lstart + Llen -1)
lkup <- read.csv("../results/lkup.csv")
ref <- read.csv("../results/ref.csv")
combo <- merge(lkup, ref, by = "Accid") %>%
### Keep obs with unique values in Lseq and Rseq only.
group_by(Rseq) %>%
filter(!duplicated(Lseq))
### Check if all Accids from lkup are in combo. Must be TRUE.
assert_that(length(intersect(combo$Accid, lkup$Accid)) == length(unique(lkup$Accid)))
### Check if all Accids from ref are in combo. Must be FALSE.
assert_that(length(intersect(combo$Accid, as.character(ref$Accid))) != length(unique(ref$Accid)))
### Set Match to 1 if Lseq is a substring of Rseq; 0 otherwise.
combo %>%
rename(Lseq = as.character(Lseq),Rseq=as.character(Rseq)) %>%
mutate(Match = grepl(Lseq,Rseq)) %>%
filter(Match == TRUE) %>%
mutate(Llen = nchar(as.character(Lseq)),
Rlen = nchar(as.character(Rseq)),
Lstart = regexpr(Lseq,Rseq,fixed = TRUE),
Lend = Lstart + Llen -1)
?name
?rename
rename(iris, petal_length = Petal.Length) %>%
head()
head(iris)
combo %>%
rename(Lseq = as.character(Lseq),Rseq=as.character(Rseq))
combo %>%
select(Lseq = as.character(Lseq),Rseq=as.character(Rseq),everything())
combo %>%
combo$Lseq <- as.character(combo$Lseq)
combo$Lseq <- as.character(combo$Lseq)
combo
View(combo)
lkup <- read.csv("../results/lkup.csv")
ref <- read.csv("../results/ref.csv")
combo <- merge(lkup, ref, by = "Accid") %>%
### Keep obs with unique values in Lseq and Rseq only.
group_by(Rseq) %>%
filter(!duplicated(Lseq))
### Check if all Accids from lkup are in combo. Must be TRUE.
assert_that(length(intersect(combo$Accid, lkup$Accid)) == length(unique(lkup$Accid)))
### Check if all Accids from ref are in combo. Must be FALSE.
assert_that(length(intersect(combo$Accid, as.character(ref$Accid))) != length(unique(ref$Accid)))
### Set Match to 1 if Lseq is a substring of Rseq; 0 otherwise.
View(combo)
combo
lkup <- readr::read_csv("../results/lkup.csv")
ref <- readr::read_csv("../results/ref.csv")
combo <- merge(lkup, ref, by = "Accid") %>%
### Keep obs with unique values in Lseq and Rseq only.
group_by(Rseq) %>%
filter(!duplicated(Lseq))
### Check if all Accids from lkup are in combo. Must be TRUE.
assert_that(length(intersect(combo$Accid, lkup$Accid)) == length(unique(lkup$Accid)))
### Check if all Accids from ref are in combo. Must be FALSE.
assert_that(length(intersect(combo$Accid, as.character(ref$Accid))) != length(unique(ref$Accid)))
### Set Match to 1 if Lseq is a substring of Rseq; 0 otherwise.
combo %>%
mutate(Match = grepl(Lseq,Rseq)) %>%
filter(Match == TRUE) %>%
mutate(Llen = nchar(Lseq),
Rlen = nchar(Rseq),
Lstart = regexpr(Lseq,Rseq,fixed = TRUE),
Lend = Lstart + Llen -1)
combo %>%
mutate(Match = grepl(Lseq,Rseq))
combo %>%
mutate(Match = (Lseq %in% Rseq))
combo %>%
mutate(Match = (Lseq %in% Rseq)) %>%
View()
combo %>%
mutate(Match = grepl(Lseq,Rseq)) %>%
View()
combo %>%
mutate(Match = grepl(Lseq,Rseq))
combo %>%
mutate(Match = (contains(Lseq,vars = Rseq))
combo %>%
mutate(Match = (contains(Lseq,vars = Rseq)))
combo %>%
mutate(Match = (contains(Lseq,vars = Rseq)))
combo %>%
mutate(Match = (contains(as.character(Lseq),vars = Rseq)))
# read csv file from test data
ori_lkup <- read.csv("../data/testData.csv")
# select only relevant columns. the name "leading protein" is converted to "leading.protein" by R default
lkup <- ori_lkup %>%
select(peptide,leading.protein) %>%
# filter out proteins with no sequence information, doesn't matter for test but will become important for real data
filter(peptide!="") %>%
# create new column indicating whether the N-terminus is blocked before tryptic digestion
mutate(Ncapped = 0)
lkup$Ncapped[contains("n",FALSE,lkup$peptide)] <- 1
# variable that stores the peptide sequence in character
pepseq <- as.character(lkup$peptide)
# temp variable for formatting sequence
tmp <- sub(".?\\.","",pepseq)
tmp <- sub("n\\[.*\\]","",tmp)
# add the formatted sequence as a new column named Lseq
lkup <- lkup %>%
mutate(Lseq=sub("\\..*","",tmp)) %>%
rename(Accid = leading.protein)
write.csv(lkup, "../results/lkup.csv")
saveRDS(lkup, "../results/lkup.rds")
################################################################################
##### Load and clean the ref dataset.
orig_ref <- read.fasta("../../data/uniprot-all.fasta", seqtype = "AA", as.string = T)
ref <- data.frame(Accid = getName(orig_ref), Rseq = rapply(getSequence(orig_ref, as.string = T), c)) %>%
### Clean Accid.
mutate(Accid = substr(as.character(Accid), 4, 9)) %>%
### Clean Rseq.
mutate(Rseq = toupper(Rseq)) %>%
### Remove duplicates.
distinct(Accid, Rseq)
### Save the clean version.
write.csv(ref,"../results/ref.csv")
saveRDS(ref, "../results/ref.rds")
##### Merge the lkup and ref datasets by Accid. Do checks.
lkup <- readr::read_csv("../results/lkup.csv")
ref <- readr::read_csv("../results/ref.csv")
combo <- merge(lkup, ref, by = "Accid") %>%
### Keep obs with unique values in Lseq and Rseq only.
group_by(Rseq) %>%
filter(!duplicated(Lseq))
### Check if all Accids from lkup are in combo. Must be TRUE.
assert_that(length(intersect(combo$Accid, lkup$Accid)) == length(unique(lkup$Accid)))
### Check if all Accids from ref are in combo. Must be FALSE.
assert_that(length(intersect(combo$Accid, as.character(ref$Accid))) != length(unique(ref$Accid)))
### Set Match to 1 if Lseq is a substring of Rseq; 0 otherwise.
combo %>%
mutate(Match = grepl(Lseq,Rseq)) %>%
filter(Match == TRUE) %>%
mutate(Llen = nchar(Lseq),
Rlen = nchar(Rseq),
Lstart = regexpr(Lseq,Rseq,fixed = TRUE),
Lend = Lstart + Llen -1)
# read csv file from test data
ori_lkup <- read.csv("../data/testData.csv")
# select only relevant columns. the name "leading protein" is converted to "leading.protein" by R default
lkup <- ori_lkup %>%
select(peptide,leading.protein) %>%
# filter out proteins with no sequence information, doesn't matter for test but will become important for real data
filter(peptide!="") %>%
# create new column indicating whether the N-terminus is blocked before tryptic digestion
mutate(Ncapped = 0)
lkup$Ncapped[contains("n",FALSE,lkup$peptide)] <- 1
# variable that stores the peptide sequence in character
pepseq <- as.character(lkup$peptide)
# temp variable for formatting sequence
tmp <- sub(".?\\.","",pepseq)
tmp <- sub("n\\[.*\\]","",tmp)
# add the formatted sequence as a new column named Lseq
lkup <- lkup %>%
mutate(Lseq=sub("\\..*","",tmp)) %>%
rename(Acc_id = leading.protein)
write.csv(lkup, "../results/lkup.csv")
saveRDS(lkup, "../results/lkup.rds")
################################################################################
##### Load and clean the ref dataset.
orig_ref <- read.fasta("../../data/uniprot-all.fasta", seqtype = "AA", as.string = T)
ref <- data.frame(Acc_id = getName(orig_ref), Rseq = rapply(getSequence(orig_ref, as.string = T), c)) %>%
### Clean Acc_id.
mutate(Acc_id = substr(as.character(Acc_id), 4, 9)) %>%
### Clean Rseq.
mutate(Rseq = toupper(Rseq)) %>%
### Remove duplicates.
distinct(Acc_id, Rseq)
### Save the clean version.
write.csv(ref,"../results/ref.csv")
saveRDS(ref, "../results/ref.rds")
##### Merge the lkup and ref datasets by Acc_id. Do checks.
lkup <- readr::read_csv("../results/lkup.csv")
ref <- readr::read_csv("../results/ref.csv")
combo <- merge(lkup, ref, by = "Acc_id") %>%
### Keep obs with unique values in Lseq and Rseq only.
group_by(Rseq) %>%
filter(!duplicated(Lseq))
### Check if all Acc_ids from lkup are in combo. Must be TRUE.
assert_that(length(intersect(combo$Acc_id, lkup$Acc_id)) == length(unique(lkup$Acc_id)))
### Check if all Acc_ids from ref are in combo. Must be FALSE.
assert_that(length(intersect(combo$Acc_id, as.character(ref$Acc_id))) != length(unique(ref$Acc_id)))
### Set Match to 1 if Lseq is a substring of Rseq; 0 otherwise.
combo %>%
mutate(Match = grepl(Lseq,Rseq)) %>%
filter(Match == TRUE) %>%
mutate(Llen = nchar(Lseq),
Rlen = nchar(Rseq),
Lstart = regexpr(Lseq,Rseq,fixed = TRUE),
Lend = Lstart + Llen -1)
?contains()
combo %>%
mutate(Match = contains(Lseq,FALSE,Rseq))
combo %>%
mutate(Match = contains(Lseq,FALSE,Rseq))
combo %>%
mutate(Match = mapply(grepl(Lseq,Rseq)))
combo %>%
mutate(Match = mapply(grepl,Lseq,Rseq))
combo %>%
mutate(Match = mapply(grepl,Lseq,Rseq)) %>%
View()
combo %>%
mutate(Match = mapply(grepl,Lseq,Rseq)) %>%
filter(Match == TRUE) %>%
mutate(Llen = nchar(Lseq),
Rlen = nchar(Rseq),
Lstart = regexpr(Lseq,Rseq,fixed = TRUE),
Lend = Lstart + Llen -1)
combo %>%
mutate(Match = mapply(grepl,Lseq,Rseq)) %>%
filter(Match == TRUE) %>%
mutate(Llen = nchar(Lseq),
Rlen = nchar(Rseq),
Lstart = mapply(regexpr,Lseq,Rseq,fixed = TRUE),
Lend = Lstart + Llen -1)
combo %>%
mutate(Match = mapply(grepl,Lseq,Rseq)) %>%
filter(Match == TRUE) %>%
mutate(Llen = nchar(Lseq),
Rlen = nchar(Rseq),
Lstart = mapply(regexpr,Lseq,Rseq,fixed = TRUE),
Lend = Lstart + Llen -1) %>%
View()
combo %>%
mutate(Match = mapply(grepl,Lseq,Rseq)) %>%
### Keep only matched obs.
filter(Match == TRUE) %>%
### Count character length of Lseq and Rseq.
mutate(Llen = nchar(Lseq),
Rlen = nchar(Rseq),
### Get start and end indices of matched Lseq.
Lstart = mapply(regexpr,Lseq,Rseq,fixed = TRUE),
Lend = Lstart + Llen -1) %>%
### Remove case with Lstart < 0.
filter(Lstart>=0) %>%
View()
combo %>%
mutate(Match = mapply(grepl,Lseq,Rseq)) %>%
### Keep only matched obs.
filter(Match == TRUE) %>%
### Count character length of Lseq and Rseq.
mutate(Llen = nchar(Lseq),
Rlen = nchar(Rseq),
### Get start and end indices of matched Lseq.
Lstart = mapply(regexpr,Lseq,Rseq,fixed = TRUE),
Lend = Lstart + Llen -1) %>%
### Remove case with Lstart < 0.
filter(Lstart>=0) %>%
arrange(Acc_id,Lstart,Lend) %>%
View()
assert_that(length(unique(combo$Acc_id)) == length(unique(combo$Rseq)))
combo
source('~/worklearn/test/src/test_seqMatch.R', echo=TRUE)
source('~/worklearn/test/src/test_seqMatch.R', echo=TRUE)
source('~/worklearn/test/src/test_seqMatch.R', echo=TRUE)
source('~/worklearn/test/src/test_seqMatch.R', echo=TRUE)
source('~/worklearn/test/src/test_seqMatch.R', echo=TRUE)
source('~/worklearn/test/src/test_seqMatch.R', echo=TRUE)
source('~/worklearn/test/src/test_seqMatch.R', echo=TRUE)
lkup <- lkup %>%
mutate(Lseq=sub("\\..*","",tmp)) %>%
rename(Acc_id = leading.protein)
write.csv(lkup, "../results/lkup.csv")
saveRDS(lkup, "../results/lkup.rds")
################################################################################
##### Load and clean the ref dataset.
orig_ref <- read.fasta("../../data/uniprot-all.fasta", seqtype = "AA", as.string = T)
ref <- data.frame(Acc_id = getName(orig_ref), Rseq = rapply(getSequence(orig_ref, as.string = T), c)) %>%
### Clean Acc_id.
mutate(Acc_id = substr(as.character(Acc_id), 4, 9)) %>%
### Clean Rseq.
mutate(Rseq = toupper(Rseq)) %>%
### Remove duplicates.
distinct(Acc_id, Rseq)
### Save the clean version.
write.csv(ref,"../results/ref.csv")
saveRDS(ref, "../results/ref.rds")
##### Merge the lkup and ref datasets by Acc_id. Do checks.
lkup <- readr::read_csv("../results/lkup.csv")
ref <- readr::read_csv("../results/ref.csv")
combo <- merge(lkup, ref, by = "Acc_id") %>%
### Keep obs with unique values in Lseq and Rseq only.
group_by(Rseq) %>%
filter(!duplicated(Lseq))
### Check if all Acc_ids from lkup are in combo. Must be TRUE.
assert_that(length(intersect(combo$Acc_id, lkup$Acc_id)) == length(unique(lkup$Acc_id)))
### Check if all Acc_ids from ref are in combo. Must be FALSE.
assert_that(length(intersect(combo$Acc_id, as.character(ref$Acc_id))) != length(unique(ref$Acc_id)))
### Set Match to 1 if Lseq is a substring of Rseq; 0 otherwise.
combo <- combo %>%
mutate(Match = mapply(grepl,Lseq,Rseq)) %>%
### Keep only matched obs.
filter(Match == TRUE) %>%
### Count character length of Lseq and Rseq.
mutate(Llen = nchar(Lseq),
Rlen = nchar(Rseq),
### Get start and end indices of matched Lseq.
Lstart = mapply(regexpr,Lseq,Rseq,fixed = TRUE),
Lend = Lstart + Llen -1) %>%
### Remove case with Lstart < 0.
filter(Lstart>=0) %>%
### Sort by Acc_id, Lstart and Lend.
arrange(Acc_id,Lstart,Lend) %>%
View()
source('~/worklearn/test/src/test_seqMatch.R', echo=TRUE)
?select
?mutate
combo %>%
mutate(Match = mapply(grepl,Lseq,Rseq)) %>%
### Keep only matched obs.
filter(Match == TRUE) %>%
### Count character length of Lseq and Rseq.
mutate(Llen = nchar(Lseq),
Rlen = nchar(Rseq),
### Get start and end indices of matched Lseq.
Lstart = mapply(regexpr,Lseq,Rseq,fixed = TRUE),
Lend = Lstart + Llen -1) %>%
### Remove case with Lstart < 0.
filter(Lstart>=0) %>%
### Sort by Acc_id, Lstart and Lend.
arrange(Acc_id,Lstart,Lend) %>%
transmute(X1.x,X1.y)
combo <- combo %>%
mutate(Match = mapply(grepl,Lseq,Rseq)) %>%
### Keep only matched obs.
filter(Match == TRUE) %>%
### Count character length of Lseq and Rseq.
mutate(Llen = nchar(Lseq),
Rlen = nchar(Rseq),
### Get start and end indices of matched Lseq.
Lstart = mapply(regexpr,Lseq,Rseq,fixed = TRUE),
Lend = Lstart + Llen -1) %>%
### Remove case with Lstart < 0.
filter(Lstart>=0) %>%
### Sort by Acc_id, Lstart and Lend.
arrange(Acc_id,Lstart,Lend) %>%
transmute(X1.x,X1.y)
combo %>%
mutate(Match = mapply(grepl,Lseq,Rseq)) %>%
### Keep only matched obs.
filter(Match == TRUE) %>%
### Count character length of Lseq and Rseq.
mutate(Llen = nchar(Lseq),
Rlen = nchar(Rseq),
### Get start and end indices of matched Lseq.
Lstart = mapply(regexpr,Lseq,Rseq,fixed = TRUE),
Lend = Lstart + Llen -1) %>%
### Remove case with Lstart < 0.
filter(Lstart>=0) %>%
### Sort by Acc_id, Lstart and Lend.
arrange(Acc_id,Lstart,Lend) %>%
transmute(Acc_id)
combo <- combo %>%
mutate(Match = mapply(grepl,Lseq,Rseq)) %>%
### Keep only matched obs.
filter(Match == TRUE) %>%
### Count character length of Lseq and Rseq.
mutate(Llen = nchar(Lseq),
Rlen = nchar(Rseq),
### Get start and end indices of matched Lseq.
Lstart = mapply(regexpr,Lseq,Rseq,fixed = TRUE),
Lend = Lstart + Llen -1) %>%
### Remove case with Lstart < 0.
filter(Lstart>=0) %>%
### Sort by Acc_id, Lstart and Lend.
arrange(Acc_id,Lstart,Lend) %>%
transmute("X1.x")
combo <- combo %>%
mutate(Match = mapply(grepl,Lseq,Rseq)) %>%
### Keep only matched obs.
filter(Match == TRUE) %>%
### Count character length of Lseq and Rseq.
mutate(Llen = nchar(Lseq),
Rlen = nchar(Rseq),
### Get start and end indices of matched Lseq.
Lstart = mapply(regexpr,Lseq,Rseq,fixed = TRUE),
Lend = Lstart + Llen -1) %>%
### Remove case with Lstart < 0.
filter(Lstart>=0) %>%
### Sort by Acc_id, Lstart and Lend.
arrange(Acc_id,Lstart,Lend)
source('~/worklearn/test/src/test_seqMatch.R', echo=TRUE)
combo <- combo %>%
mutate(Match = mapply(grepl,Lseq,Rseq)) %>%
### Keep only matched obs.
filter(Match == TRUE) %>%
### Count character length of Lseq and Rseq.
mutate(Llen = nchar(Lseq),
Rlen = nchar(Rseq),
### Get start and end indices of matched Lseq.
Lstart = mapply(regexpr,Lseq,Rseq,fixed = TRUE),
Lend = Lstart + Llen -1) %>%
### Remove case with Lstart < 0.
filter(Lstart>=0) %>%
### Sort by Acc_id, Lstart and Lend.
arrange(Acc_id,Lstart,Lend)
source('~/worklearn/test/src/test_seqMatch.R', echo=TRUE)
##### Merge the lkup and ref datasets by Acc_id. Do checks.
lkup <- readr::read_csv("../results/lkup.csv")
ref <- readr::read_csv("../results/ref.csv")
combo <- merge(lkup, ref, by = "Acc_id") %>%
### Keep obs with unique values in Lseq and Rseq only.
group_by(Rseq) %>%
filter(!duplicated(Lseq))
### Check if all Acc_ids from lkup are in combo. Must be TRUE.
assert_that(length(intersect(combo$Acc_id, lkup$Acc_id)) == length(unique(lkup$Acc_id)))
### Check if all Acc_ids from ref are in combo. Must be FALSE.
assert_that(length(intersect(combo$Acc_id, as.character(ref$Acc_id))) != length(unique(ref$Acc_id)))
### Set Match to 1 if Lseq is a substring of Rseq; 0 otherwise.
combo <- combo %>%
mutate(Match = mapply(grepl,Lseq,Rseq)) %>%
### Keep only matched obs.
filter(Match == TRUE) %>%
### Count character length of Lseq and Rseq.
mutate(Llen = nchar(Lseq),
Rlen = nchar(Rseq),
### Get start and end indices of matched Lseq.
Lstart = mapply(regexpr,Lseq,Rseq,fixed = TRUE),
Lend = Lstart + Llen -1) %>%
### Remove case with Lstart < 0.
filter(Lstart>=0) %>%
### Sort by Acc_id, Lstart and Lend.
arrange(Acc_id,Lstart,Lend) %>%
transmute(X1.x,X1.y) %>%
View()
source('~/worklearn/test/src/test_seqMatch.R', echo=TRUE)
source('~/worklearn/test/src/test_seqMatch.R', echo=TRUE)
View(combo)
lkup <- readr::read_csv("../results/lkup.csv")
ref <- readr::read_csv("../results/ref.csv")
combo <- merge(lkup, ref, by = "Acc_id") %>%
### Keep obs with unique values in Lseq and Rseq only.
group_by(Rseq) %>%
filter(!duplicated(Lseq))
source('~/worklearn/test/src/test_seqMatch.R', echo=TRUE)
source('~/worklearn/test/src/test_seqMatch.R', echo=TRUE)
source('~/worklearn/test/src/test_seqMatch.R', echo=TRUE)
source('~/worklearn/test/src/test_seqMatch.R', echo=TRUE)
### Keep matching statistics only.
stat <- select(combo, -Lseq, -Rseq, -Match) %>%
View()
source('~/worklearn/test/src/test_seqMatch.R', echo=TRUE)
head(lkup)
head(ref)
head(combo)
##### Merge the lkup and ref datasets by Acc_id. Do checks.
lkup <- read.csv("../results/lkup.csv")
ref <- read.csv("../results/ref.csv")
combo <- merge(lkup, ref, by = "Acc_id") %>%
View()
##### Merge the lkup and ref datasets by Acc_id. Do checks.
lkup <- read.csv("../results/lkup.csv")
ref <- read.csv("../results/ref.csv")
combo <- merge(lkup, ref, by = "Acc_id") %>%
### Keep obs with unique values in Lseq and Rseq only.
group_by(Rseq) %>%
filter(!duplicated(Lseq))
combo$X.x = NULL
View(combo)
source('~/worklearn/test/src/test_seqMatch.R', echo=TRUE)
